{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../src/core/eventManager.ts","../../src/utils/propValidator.ts","../../src/utils/constant.ts","../../src/utils/cssTransition.tsx","../../src/utils/collapseToast.ts","../../src/components/CloseButton.tsx","../../src/components/ProgressBar.tsx","../../src/components/Toast.tsx","../../src/hooks/useToast.ts","../../src/components/Transitions.tsx","../../src/components/ToastPositioner.tsx","../../src/components/ToastContainer.tsx","../../src/hooks/useToastContainer.ts","../../src/core/toast.tsx","../../src/hooks/useKeeper.ts","../../src/hooks/toastContainerReducer.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","eventManager","list","emitQueue","on","this","set","event","off","cb","get","cancelEmit","timers","clearTimeout","emit","args","timer","setTimeout","callback","isNum","v","isNaN","isBool","isStr","isFn","parseClassName","hasToastId","toastId","canUseDom","window","canBeRendered","content","isValidElement","POSITION","TOP_LEFT","TOP_RIGHT","TOP_CENTER","BOTTOM_LEFT","BOTTOM_RIGHT","BOTTOM_CENTER","TYPE","INFO","SUCCESS","WARNING","ERROR","DEFAULT","DARK","cssTransition","enter","exit","duration","appendPosition","collapse","collapseDuration","enterDuration","exitDuration","children","position","preventExitTransition","props","enterClassName","exitClassName","onExited","node","height","style","requestAnimationFrame","collapseToast","timeout","onEnter","onEntered","onExit","unmountOnExit","CloseButton","closeToast","type","ariaLabel","className","onClick","e","viewBox","fillRule","d","ProgressBar","delay","isRunning","hide","userStyle","controlledProgress","progress","rtl","isIn","animationDuration","animationPlayState","opacity","classNames","cx","animationEvent","React","Toast","useState","setIsRunning","setPreventExitTransition","toastRef","useRef","drag","useKeeper","start","x","y","deltaX","removalDistance","canCloseOnClick","canDrag","boundingRect","syncProps","autoClose","pauseOnHover","closeOnClick","toast","getX","top","bottom","left","right","pauseToast","playToast","getY","Math","useEffect","document","eventHandlers","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","onDragTransitionEnd","useToast","closeButton","hideProgressBar","Transition","transition","bodyClassName","bodyStyle","progressClassName","progressStyle","updateId","role","deleteToast","cssClasses","in","appear","nodeRef","id","ref","renderCloseButton","key","Bounce","ToastPositioner","rest","child","ToastContainer","forceUpdate","useReducer","reducer","dispatch","containerRef","toastCount","queue","collection","instance","toastKey","displayedToast","containerId","isToastActive","getToast","limit","enableMultiContainer","queueLen","freeSlot","dequeueToast","toDequeue","toastContent","toastProps","staleId","appendToast","options","isNotValid","removeToast","isNotAnUpdate","toastAutoClose","containerAutoClose","pauseOnFocusLoss","draggable","draggablePercent","removeFromCollection","cloneElement","toastToRender","toastList","p","getToastToRender","useToastContainer","swag","pointerEvents","newestOnTop","containers","lazy","isAnyContainerMounted","container","latestInstance","getContainer","generateToastId","Date","getToastId","dispatchToast","containerDomNode","render","mergeOptions","arg","refresh","state","action","params","oldOptions","oldContent","nextOptions","config","containerConfig","containerInstance","item","_unsupportedIterableToArray","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","_arrayLikeToArray","len","arr2"],"mappings":"+KAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,ogBI2D/F,IAAMC,EAA6B,CACxCC,KAAM,IADkC,IAExCC,UAAW,IAF6B,IAIxCC,GAJwC,cAOtC,OAFAC,KAAA,aAAwBA,KAAKH,KAAKI,IAAIC,EAAtC,IACAF,KAAA,oBACA,MAGFG,IAVwC,cAWtC,KAAc,CACZ,IAAMC,EAAKJ,KAAKH,KAAKQ,IAAIH,GAAd,QAA6B,SAAAE,GAAE,OAAIA,IAAJ,KAE1C,OADAJ,KAAA,cACA,KAGF,OADAA,KAAA,eACA,MAGFM,WApBwC,YAqBtC,IAAMC,EAASP,KAAKF,UAAUO,IAA9B,GAMA,OALA,IACEE,WAAe,mBAAsBC,aAAtB,MACfR,KAAA,qBAGF,MAWFS,KAtCwC,Y,kCAsClBC,uDACpBV,KAAA,aACEA,KAAKH,KAAKQ,IAAIH,GAAd,SAA8B,YAC5B,IAAMS,EAAQC,YAAW,WAEvBC,oBAFF,GAKA,oBAA6B,kBAA7B,IACA,gC,SC3GQC,EAAMC,GACpB,MAAoB,kBAANA,IAAmBC,MAAjC,GAGF,SAAgBC,EAAOF,GACrB,yBAAcA,EAGhB,SAAgBG,EAAMH,GACpB,wBAAcA,EAGhB,SAAgBI,EAAKJ,GACnB,0BAAcA,EAGhB,SAAgBK,EAAeL,GAC7B,MAAoB,kBAANA,EAAiBA,EAA/B,KAOF,SAAgBM,EAAWC,GACzB,OAAOA,OAAP,EAaK,IAAMC,IACO,qBAAXC,SACPA,OADA,WAEAA,gBAHK,eAMP,SAAgBC,EAAiBC,GAC/B,OACEC,6BAA2BT,EAA3BS,IAA6CR,EAA7CQ,IAA8Db,EADhE,GCrCK,IAAMc,EAAsD,CACjEC,SADiE,WAEjEC,UAFiE,YAGjEC,WAHiE,aAIjEC,YAJiE,cAKjEC,aALiE,eAMjEC,cAAe,iBAGJC,EAA4C,CACvDC,KADuD,OAEvDC,QAFuD,UAGvDC,QAHuD,UAIvDC,MAJuD,QAKvDC,QALuD,UAMvDC,KAAM,Q,SCkBQC,K,IAQd,IAPAC,UACAC,S,IACAC,oBAAWA,EAAA,M,IACXC,0BAAiBA,GAAA,E,IACjBC,oBAAWA,GAAA,E,IACXC,4BAAmBA,EAAnBA,MAUA,OANIxE,kBAAJ,IAA+BqE,UAC5BI,EAA+BJ,EADoB,GACpCK,EAAgBL,EADoB,IAGpDI,EAAgBC,EAAhBD,EAGK,SAAyB,G,IAC9BE,aACAC,aACAC,0BACAhE,SACGiE,8DAEGC,EAAiBT,EAAoBH,EAAN,OAArC,EACMa,EAAgBV,EAAoBF,EAAN,OAApC,EAmBMa,EAAW,SAAXA,IACJ,IAAMC,EAAOJ,UAAb,QAEA,IACEI,wCACAX,ECxFR,SACEW,EACArE,EACAwD,uBAEA,IAAMc,EAASD,EAAf,aACME,EAAQF,EAAd,MAEAG,uBAAsB,WACpBD,sBACAA,SAAeD,EAAfC,KACAA,2BAEAC,uBAAsB,WACpBD,aACAA,cACAA,aACAhD,YAAW,kBAAMvB,MAAjBuB,SDuEakD,CAAcJ,EAAMrE,EAAvB,GAAiDA,MAc7D,OACE,6CACMiE,GACJS,QACEV,EACIN,EAAQ,KAGR,CACEJ,MADF,EAEEC,KAAMG,EACFG,EADU,EAEVA,EAAe,IAG3Bc,QAnDY,WACd,IAAMN,EAAOJ,UAAb,QACA,IACEI,mBACAA,qCACAA,0BAAkCT,EAAlCS,OA+CAO,UA3Cc,WAChB,IAAMP,EAAOJ,UAAb,QACA,IACEI,sBACAA,qBAwCAQ,OAAQb,EAAwBI,EA3BrB,WACb,IAAMC,EAAOJ,UAAb,QACA,IACEI,mBACAA,qCACAA,0BAAkCR,EAAlCQ,KACAA,uCAsBAS,eAAa,IAlBjB,I,SEjGYC,K,IACdC,eACAC,S,IACAC,qBAAYA,EAAA,UAEZ,OACE,kCACEC,UAAc,kDAA+EF,EAC7FA,KAAK,SACLG,QAAS,SAAAC,GACPA,oBACAL,M,aAEUE,GAEZ,+B,cAAiB,OAAOI,QAAQ,aAC9B,gCACEC,SAAS,UACTC,EAAE,+H,SCmCIC,K,QACdC,UACAC,cACAX,eACAC,SACAW,SACAT,cACOU,IAAPtB,MACAuB,uBACAC,aACAC,QACAC,SAEM1B,EAAK,cAET2B,kBAAsBR,EAFb,KAGTS,mBAAoBR,EAAY,UAHvB,SAITS,QAASR,EAAO,EAAI,IAGtB,IAAwBrB,6BAExB,IAAM8B,EAAaC,IACd,yBACHR,EACO,qCACA,mCACJ,2BALgB,UAOb,+BAPa,KAArB,GAeMS,IAAc,MACjBT,GAAsBC,GAAtBD,oBADiB,kBAIhBA,GAAsBC,EAAtBD,OAEI,WACEG,GAAQjB,KAPlB,GAWA,OAAOwB,6CAAKrB,UAAWkB,EAAY9B,MAAOA,GAA1C,IAGFkB,eAA2B,CACzBR,KAAMnC,EADmB,QAEzB8C,MAAM,GC5GD,IAAMa,EAA8B,SAAAxC,G,QC6B3C,SAAyBA,G,MACWyC,oBAAS,GAApCf,OAAWgB,O,EACwCD,oBAAS,GAA5D1C,OAAuB4C,OACxBC,EAAWC,iBAAjB,MACMC,EAAOC,EAAqB,CAChCC,MADgC,EAEhCC,EAFgC,EAGhCC,EAHgC,EAIhCC,OAJgC,EAKhCC,gBALgC,EAMhCC,iBANgC,EAOhCC,SAPgC,EAQhCC,aAAc,OAEVC,EAAYT,EAAU/C,GAA5B,GACQyD,EAA+DzD,EAA/DyD,UAAWC,EAAoD1D,EAApD0D,aAAc3C,EAAsCf,EAAtCe,WAAYI,EAA0BnB,EAA1BmB,QAASwC,EAAiB3D,EAAjB2D,aA4BtD,cAGE,IAAMC,EAAQhB,EAAd,QACAE,qBACAA,aACAA,eAAoBc,EAApBd,wBACAc,sBACAd,QAAaA,IAASe,EAAKzC,EAA3B0B,aACAA,kBAAuBc,eAAqB5D,mBAA5C8C,KAGF,aACE,GAAIA,EAAJ,aAAuB,OACgBA,EADhB,aACbgB,EADa,MACRC,EADQ,SACAC,EADA,OACMC,EADN,QAInBjE,gBACA8C,KADA9C,GAEA8C,KAFA9C,GAGA8C,KAHA9C,GAIA8C,KALF,EAOEoB,IAEAC,KAKN,aACEzB,MAGF,aACEA,MA6BF,cACE,IAAMkB,EAAQhB,EAAd,QAEIE,EAAJ,UACE,GAAeoB,IAEfpB,IAASe,EAATf,GACAA,SAAcA,IAASA,EAAvBA,MACAA,IAzHN,SAAc1B,GACZ,OAAOA,iBAAmBA,wBAAnBA,EACHA,mBADGA,QAEHA,EAFJ,QAwHagD,CALO,GAQZtB,UAAeA,EAAnB,IAA2BA,sBAE3Bc,gCAAsCd,EAAtCc,aACAA,oBAAyB,EACvBS,SAASvB,SAAcA,EADzBc,mBAKJ,aACE,IAAMA,EAAQhB,EAAd,QACA,GAAIE,EAAJ,QAAkB,CAGhB,GAFAA,aAEIuB,SAASvB,EAATuB,QAAwBvB,EAA5B,gBAGE,OAFAH,WACA3C,eAIF4D,kDACAA,kCACAA,qBA1HJU,qBAAU,WAIR,OAHIzG,EAAKmC,EAAT,SACEA,SAAa3B,yBAAe2B,EAAf3B,WAAkC2B,WAA/CA,OAEK,WACDnC,EAAK2F,EAAT,UACEA,UACEnF,yBAAemF,EAAfnF,WAAsCmF,WADxCA,UANNc,IAYAA,qBAAU,WAER,OADAtE,cA8DAuE,yCACAA,uCAEAA,yCACAA,yCAjEO,WACLvE,cAoEFuE,4CACAA,0CAEAA,4CACAA,+CAtEC,CAACvE,EALJsE,YAOAA,qBAAU,WAER,OADAtE,qBA6CA9B,mCACAA,mCA7CO,WACL8B,qBAgDF9B,sCACAA,yCA/CC,CAAC8B,EALJsE,mBA2GA,IAAME,EAA4C,CAChDC,YADgD,EAEhDC,aAFgD,EAGhDC,UAHgD,EAIhDC,WAAYC,GAGVpB,GAAJ,IACEe,iBACAA,kBAIF,IACEA,UAAwB,YACtBrD,GAAWA,EAAXA,GACA2B,mBAAwB/B,MAI5B,MAAO,CACLoD,UADK,EAELD,WAFK,EAGLxC,UAHK,EAIL3B,sBAJK,EAKL6C,SALK,EAML4B,iBDhMEM,CAAS9E,GAJX0B,cACA3B,0BACA6C,aACA4B,kBAGAO,EAqBE/E,EArBF+E,YACAlF,EAoBEG,EApBFH,SACA4D,EAmBEzD,EAnBFyD,UACAtC,EAkBEnB,EAlBFmB,QACAH,EAiBEhB,EAjBFgB,KACAgE,EAgBEhF,EAhBFgF,gBACAjE,EAeEf,EAfFe,WACYkE,EAcVjF,EAdFkF,WACApF,EAaEE,EAbFF,SACAoB,EAYElB,EAZFkB,UACAZ,EAWEN,EAXFM,MACA6E,EAUEnF,EAVFmF,cACAC,EASEpF,EATFoF,UACAC,EAQErF,EARFqF,kBACAC,EAOEtF,EAPFsF,cACAC,EAMEvF,EANFuF,SACAC,EAKExF,EALFwF,KACA1D,EAIE9B,EAJF8B,SACAC,EAGE/B,EAHF+B,IACA/D,EAEEgC,EAFFhC,QACAyH,EACEzF,EADFyF,YAEIC,EAAarD,IACd,kBACA,oBAFgB,UAIb,wBAJa,KAArB,GAQMR,IAAN,EAWA,OACE,2BACE8D,GAAI3F,EAAK,GACT4F,QAAM,EACN7J,KAAM0J,EACN3F,SAAUA,EACVC,sBAAuBA,EACvB8F,QAASjD,GAET,6CACEkD,GAAI9H,EACJmD,QAASA,EACTD,UAAWwE,GACPlB,GACJlE,MAAOA,EACPyF,IAAKnD,IAEL,+CACO5C,EAAK,IAAO,CAAEwF,KAAMA,GAAR,CACjBtE,UAAWmB,IAAM,uBAAJ,GACb/B,MAAO8E,IAXX,GAlBJ,YACE,MAAkB,OAAO,KAEzB,IAAMpF,EAAQ,CAAEe,WAAF,EAAcC,QAC5B,OAAInD,EAAJ,GAA8BkH,EAAP,GACnBxC,yBAAJ,GACSA,yBAAP,QADF,EA4BKyD,CAfH,IAgBIvC,GAAD,IACC,2CACO8B,IAAA,EACD,CAAEU,IAAK,MAAMV,GACb,IACJxD,IAAKA,EACLN,MAAOgC,EACP/B,UAAWA,EACXM,KAAMhC,EAAK,GACXe,WAAYA,EACZY,KAAMqD,EACNhE,KAAMA,EACNV,MAAOgF,EACPpE,UAAWmE,EACXxD,mBAAoBA,EACpBC,SAAUA,QE/FhBoE,EAAS9G,EAAc,CAC3BC,MAAU,yBACVC,KAAS,wBACTE,gBAAgB,ICAL2G,EAAkD,SAAC,G,IAC9DtG,aACAqB,cACAZ,UACG8F,wCAMH,cAFOA,EAAI,GAGT,+BAAKlF,UAAWA,EAAYZ,MAAOA,GAChC,kBAA6B,SAAA+F,GAAK,OACjC9D,yBADiC,QCL5B+D,EAAgD,SAAAtG,G,eCuC3BA,G,IACvBuG,EAAeC,sBAAW,SAAAvD,GAAC,OAAIA,EAAJ,IAAF,GAAzBsD,G,EACiBC,qBAAWC,EAAS,IAAvC7C,OAAO8C,OACRC,EAAe9D,iBAArB,MACI+D,EAAa7D,EAAjB,GACI8D,EAAQ9D,EAAZ,IACM+D,EAAa/D,EAAnB,IACMgE,EAAWhE,EAA6B,CAC5CiE,SAD4C,EAE5CC,eAF4C,EAG5CjH,MAH4C,EAI5CkH,YAJ4C,KAK5CC,cAL4C,EAM5CC,SAAU,SAAAtB,GAAE,OAAIgB,MAAJ,QAyBd,cACE,WAAOlD,aAGT,c,IAA6BsD,gB,EACaH,EAAS/G,MAAzCqH,UAAOC,yBAEbD,KACEH,GACCH,mBAHL,KAKEH,GAAcC,EAAdD,OACAC,MAIJ,cACE,IAAMU,EAAWV,EAAjB,OAOA,IANAD,EAAa7I,KACT6I,EADS7I,EAET6I,EAAaG,EAFjBH,gBAIA,IAAoBA,KAEhBW,EAAJ,EAAkB,CAChB,IAAMC,EAAWzJ,OAA0BgJ,QAA3C,MAEA,GAAIQ,OAAJ,IAAsBC,EACpBT,mBACAU,QACK,CACL,IAAMC,EAAYF,MAAlB,EACAT,mBAEA,IAAK,IAAI9L,EAAT,EAAgBA,EAAhB,EAA+BA,IAAKwM,KAGxCf,EAAS,CAAE1F,KAAF,SAAkBhD,YAG7B,a,MACgD6I,UAAtCc,iBAAcC,eAAYC,YAGlCvK,YAAW,WACTwK,EAAYH,EAAcC,EAA1BE,KADFxK,KAwBF,gB,IAEImE,UAAOoG,YAAYE,2BAErB,GAAK5J,EAAD,KAlBN,Y,IACE+I,gBACAlJ,YACAuH,aAEA,UAAQoB,EAAD,SACJI,8BACCG,IAAgBH,QAFb,aAGJA,oBAHI,MAG+BxB,GAUPyC,CAA/B,I,IAEQhK,EAAsB+J,EAAtB/J,QAASuH,EAAawC,EAAbxC,SACTvF,EAAyB+G,EAAzB/G,MACFe,EAAa,kBAAMkH,EAAN,IACbC,IAAiBf,EAFUJ,EAAlBI,eAEf,GAEA,GAAmBP,IAEnB,IXzIFuB,EACAC,EWwIQR,EAAyB,CAC7B5J,QAD6B,EAE7BuH,SAF6B,EAG7BU,IAAK8B,OAAehB,EAHS,WAI7B/F,KAAM+G,EAJuB,KAK7BhH,WAL6B,EAM7BgE,YAAagD,EANgB,YAO7BhG,IAAK/B,EAPwB,IAQ7BF,SAAUiI,YAAqB/H,EARF,SAS7BkF,WAAY6C,cAAuB/H,EATN,WAU7BkB,UAAWpD,EAAeiK,aAAqB/H,EAVlB,gBAW7BmF,cAAerH,EACbiK,iBAAyB/H,EAZE,eAc7BM,MAAOyH,SAAiB/H,EAdK,WAe7BoF,UAAW2C,aAAqB/H,EAfH,UAgB7BmB,QAAS4G,WAAmB/H,EAhBC,QAiB7B0D,aAAc/F,EAAOoK,EAAPpK,cACVoK,EADUpK,aAEVqC,EAnByB,aAoB7BqI,iBAAkB1K,EAAOoK,EAAPpK,kBACdoK,EADcpK,iBAEdqC,EAtByB,iBAuB7BsI,UAAW3K,EAAOoK,EAAPpK,WACPoK,EADOpK,UAEPqC,EAzByB,UA0B7BuI,iBAAkB/K,EAAMuK,EAANvK,kBACduK,EADcvK,iBAEbwC,EA5BwB,iBA6B7B2D,aAAchG,EAAOoK,EAAPpK,cACVoK,EADUpK,aAEVqC,EA/ByB,aAgC7BqF,kBAAmBvH,EACjBiK,qBAA6B/H,EAjCF,mBAmC7BsF,cAAeyC,iBAAyB/H,EAnCX,cAoC7ByD,WX7KJ0E,EW6KiCJ,EAAD,UX5KhCK,EW4KoDpI,EApCnB,WXtI1BmI,OACJ3K,MAAyB2K,EADrBA,IAAP,GW2KInD,gBAAiBrH,EAAOoK,EAAPpK,iBACboK,EADapK,gBAEbqC,EAvCyB,gBAwC7B8B,SAAUiG,EAxCmB,SAyC7BvC,KAAM5H,EAAMmK,EAANnK,MAAsBmK,EAAtBnK,KAAqCoC,EAzCd,KA0C7ByF,YA1C6B,YAyGjC,mBACSqB,EAAP,GACAP,IAhEIiC,MAIA3K,EAAKkK,EAAT,UAA0BH,SAAoBG,EAApBH,QACtB/J,EAAKkK,EAAT,WAA2BH,UAAqBG,EAArBH,SAE3B,IAAI7C,EAAc/E,EAAlB,aAEI+H,mBAAiC5J,EAAc4J,EAAnD,aACEhD,EAAcgD,EAAdhD,aACK,IAAIgD,gBACThD,GAAc5G,EAAc6B,EAAd7B,cAAmC6B,EAAnC7B,aAGhByJ,gBAEA,IAAID,EAAJ,EAEItJ,8BAA4BT,EAAMQ,EAAtC,MACEuJ,EAAec,uBAAarK,EAAS,CACnC2C,eAEOlD,EAAJ,KACL8J,EAAevJ,EAAQ,CAAE2C,gBAKzBf,SACAA,QADAA,GAEA4G,EAAa5G,EAFbA,OADF,EAME6G,OAAW,CAAEc,aAAF,EAAgBC,WAAhB,EAA4BC,YAC9BrK,MAAiBiE,EAArB,EACLnE,YAAW,WACTwK,EAAYH,EAAcC,EAA1BE,KADFxK,GAIAwK,EAAYH,EAAcC,EAA1BE,IAIJ,kB,IAKU9J,EAAY4J,EAAZ5J,QAER8I,KAAsB,CACpB1I,QADoB,EAEpB4B,MAAO4H,GAETlB,EAAS,CACP1F,KADO,MAEPhD,QAFO,EAGP6J,YASJ,cAQE,IALA,IAAMa,EAAN,GACMC,EAAY3I,cACd1E,eADc0E,UAEd1E,YAFJ,GAISL,EAAT,EAAgBA,EAAI0N,EAApB,OAAsC1N,IAAK,CACzC,IAAM2I,EAAQkD,EAAW6B,EAAzB,IACQ7I,EAAa8D,EAFoB,eAGzC8E,OAA4BA,KAA5BA,IAEAA,aAGF,OAAQpN,OAAA,aAAwD,SAAAsN,GAAC,OAC/D9L,EAAG8L,EAAGF,EADyD,OAKnE,OA1OApE,qBAAU,WASR,OARAyC,cAAuB/G,EAAvB+G,YACAzK,8BAGmB,SAAA0B,GAAO,OAAI2I,WAAwBsB,EAA5B,MAH1B3L,kBAOO,kBAAMA,EAAA,OAAN,MATTgI,IAYAA,qBAAU,WACRyC,kBACAA,iBAA0BnD,EAA1BmD,OACAzK,SAAgCsH,EAAhCtH,OAA8C0D,EAA9C1D,eACC,CAJHgI,IAMAA,qBAAU,WACRyC,aAuNK,CACL8B,iBADK,EAEL/B,WAFK,EAGLH,aAHK,EAILQ,iBDpSwD2B,CAAkB,GAApED,qBAAkBlC,iBAAcQ,kBAGhCjG,EAAuClB,EAAvCkB,UAAWZ,EAA4BN,EAA5BM,MAAOyB,EAAqB/B,EAArB+B,IAAKmF,EAAgBlH,EAAhBkH,YAE/B,OACE,+BACEnB,IAAKY,EACLzF,UAAW,WACX4E,GAAIoB,GAEH2B,GAAiB,c,MACVE,EAAO,CACX7H,UAAWmB,IACN,4BACA,8BAFQ,UAGL,kCAHK,KAIXvE,EALS,IAOXwC,MACE,IAAAqI,EAAA,qBACgBK,cAAe,SAD/B,SAKJ,OACE,2CAAqBD,GAAM9C,IAAG,aAAenG,IAC1C6I,EAAA,KAAc,Y,IAAGvK,YAAgBwJ,IAAP5H,MACzB,OACE,2CACM4H,GACJjC,GAAIwB,EAAcS,EAAD,SACjB3B,IAAG,SAAW2B,EAAW3B,IACzBlB,aACE6C,oBAEIA,EAAW7C,cARrB,YA2DduB,eAA8B,CAC5BxG,SAAUxB,EADkB,UAE5B4G,WAF4B,EAG5BnD,KAH4B,EAI5B0B,UAJ4B,IAK5BuB,iBAL4B,EAM5BD,YAN4B,EAO5BrB,cAP4B,EAQ5B2E,kBAR4B,EAS5B1E,cAT4B,EAU5BsF,aAV4B,EAW5BX,WAX4B,EAY5BC,iBAZ4B,GAa5B/C,KAAM,SE1FR,IACA,EACA,EACA,EAHI0D,EAAa,IAAjB,IAIIrC,EAAJ,GACIsC,GAAJ,EAKA,SAASC,IACP,OAAOF,OAAP,EAcF,SAAS9B,EAASpJ,EAAlB,G,IACQqL,EATR,SAAsBnC,GACpB,OAAKkC,IACEF,MAAgBhC,GAAcoC,GADA,KAQnBC,CADarC,eAE/B,SAEOmC,WAAP,GAFuB,KAQzB,SAASG,IACP,OAAQnF,2BAA6BoF,oBAA9B,cAAP,IAMF,SAASC,EAAW3B,GAClB,OAAIA,IAAYnK,EAAMmK,EAANnK,UAA0BJ,EAAMuK,EAAhD,UACSA,EAAP,QAGKyB,IAOT,SAASG,EAAc,EAAvB,GAgBE,OAZIP,IACF9M,eAEAuK,OAAW,CAAEzI,QAAF,EAAW2J,YAClBoB,GAAJ,IACEA,KACAS,EAAmBrF,uBAAnBqF,OACArF,6BACAsF,iBAAOtH,2CAAD,IAANsH,KAIG9B,EAAP,QAMF,SAAS+B,EAAa9I,EAAtB,GACE,qBAEEA,KAAO+G,GAAWA,EAAZ,MAFR,EAGE/J,QAAS0L,EAAW3B,KAIxB,IAAMnE,EAAQ,SAACxF,EAAD,UACZuL,EAAcvL,EAAS0L,EAAajL,EAAD,QADvB,KCnGd,SAAgBkE,EAAagH,EAAQC,mBAAU,GAC7C,IAAMjE,EAAMlD,iBAAZ,GAMA,OAJAyB,qBAAU,WACR,IAAayB,gBAGRA,EAAP,Q,SCNcU,EAAQwD,EAAcC,GACpC,OAAQA,EAAR,MACE,UACE,MAAO,aAAWA,EAAX,kBAAkC,SAAApE,GAAE,OAAIA,IAAOoE,EAAX,WAC7C,aACE,OAAOnM,EAAWmM,EAAX,SACHD,EAAA,QAAa,SAAAnE,GAAE,OAAIA,IAAOoE,EAAX,WADnB,IPWN,SAASrG,EAAKzC,GACZ,OAAOA,iBAAmBA,wBAAnBA,EACHA,mBADGA,QAEHA,EAFJ,QKoFFwC,UAAgB,qBACd+F,EAAcvL,EAAS0L,EAAajL,EAAD,QADrB,KAGhB+E,OAAa,qBACX+F,EAAcvL,EAAS0L,EAAajL,EAAD,KADxB,KAGb+E,QAAc,qBACZ+F,EAAcvL,EAAS0L,EAAajL,EAAD,MADvB,KAGd+E,UAAgB,qBACd+F,EAAcvL,EAAS0L,EAAajL,EAAD,QADrB,KAGhB+E,OAAa,qBACX+F,EAAcvL,EAAS0L,EAAajL,EAAD,KADxB,KAMb+E,OAAaA,EAAbA,QAKAA,UAAgB,mBACdwF,KAA2B9M,EAAA,OADb,IAMhBsH,oBAA0B,4BAACuG,MAAD,IACxBf,KAA2B9M,EAAA,OADH,IAM1BsH,WAAiB,YACf,IAAIuD,GAAJ,EAQA,OANA+B,WAAmB,SAAAG,GACbA,iBAA2BA,gBAA/B,KACElC,SAIJ,GAGFvD,SAAe,mBAAcmE,UAAyB,IAGpDzK,YAAW,WACT,IAAMsG,EAAQwD,EAASpJ,EAAvB,GACA,KAAW,KACMoM,EAAoCxG,EAD1C,MAC2ByG,EAAezG,EAD1C,QAGH0G,EAAc,EAAH,iBAGftM,QAAS+J,WAHM,EAIfxC,SAAUiE,MAGRc,YAAJ,IAAqCA,aAErC,IAAMlM,EACJ,qBAAOkM,EAAP,OACIA,EADJ,OADF,SAIOA,EAAP,OAEAX,EAAcvL,EAAduL,MApBJrM,IA4BFsG,OAAa,YACXA,WAAiB,CACf9B,SAAU,KAQd8B,WAAiB,YAIf,OAHI/F,EAAJ,IACEvB,UAEK,WACLuB,MAAkBvB,EAAA,MAAlBuB,KAOJ+F,YAAkB,iBAAC2G,UAA8B,IAC/CpB,KACAqB,KAGF5G,aACAA,SAMAtH,QACsB,YAClBgN,EAAiBmB,eAAjBnB,EACAJ,WAEArC,WAAc,SAAA6D,GACZpO,SAA8BoO,EAA9BpO,QAA4CoO,EAA5CpO,YAGFuK,QATJvK,MAWyB,YACrB4M,EAAU,OAAQuB,eAAlBvB,GAEA,IAAIA,QACF5M,uBAME2B,GAAJ,GACEsG,iC,iCGpPN,+CACe,SAASoG,EAA4BC,EAAGC,GACrD,GAAKD,EAAL,CACA,GAAiB,kBAANA,EAAgB,OAAO,YAAiBA,EAAGC,GACtD,IAAIC,EAAIxP,OAAOyP,UAAUC,SAASC,KAAKL,GAAGM,MAAM,GAAI,GAEpD,MADU,WAANJ,GAAkBF,EAAEO,cAAaL,EAAIF,EAAEO,YAAYC,MAC7C,QAANN,GAAqB,QAANA,EAAoB5P,MAAMmQ,KAAKP,GACxC,cAANA,GAAqB,2CAA2CQ,KAAKR,GAAW,YAAiBF,EAAGC,QAAxG,K,iCCPa,SAASU,EAAkBvQ,EAAKwQ,IAClC,MAAPA,GAAeA,EAAMxQ,EAAIkB,UAAQsP,EAAMxQ,EAAIkB,QAE/C,IAAK,IAAIjB,EAAI,EAAGwQ,EAAO,IAAIvQ,MAAMsQ,GAAMvQ,EAAIuQ,EAAKvQ,IAC9CwQ,EAAKxQ,GAAKD,EAAIC,GAGhB,OAAOwQ,EAPT","file":"static/js/7.2732cd2d.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {\n  Id,\n  ToastContent,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\nexport const enum Event {\n  Show,\n  Clear,\n  DidMount,\n  WillUnmount,\n  Change,\n  ClearWaitingQueue\n}\n\ntype OnShowCallback = (\n  content: ToastContent,\n  options: NotValidatedToastProps\n) => void;\ntype OnClearCallback = (id?: Id) => void;\ntype OnClearWaitingQueue = (params: ClearWaitingQueueParams) => void;\ntype OnDidMountCallback = (containerInstance: ContainerInstance) => void;\ntype OnWillUnmountCallback = OnDidMountCallback;\nexport type OnChangeCallback = (\n  toast: number,\n  containerId?: number | string\n) => void;\ntype Callback =\n  | OnShowCallback\n  | OnClearCallback\n  | OnClearWaitingQueue\n  | OnDidMountCallback\n  | OnWillUnmountCallback\n  | OnChangeCallback;\ntype TimeoutId = ReturnType<typeof window.setTimeout>;\n\nexport interface EventManager {\n  list: Map<Event, Callback[]>;\n  emitQueue: Map<Event, TimeoutId[]>;\n  on(event: Event.Show, callback: OnShowCallback): EventManager;\n  on(event: Event.Clear, callback: OnClearCallback): EventManager;\n  on(\n    event: Event.ClearWaitingQueue,\n    callback: OnClearWaitingQueue\n  ): EventManager;\n  on(event: Event.DidMount, callback: OnDidMountCallback): EventManager;\n  on(event: Event.WillUnmount, callback: OnWillUnmountCallback): EventManager;\n  on(event: Event.Change, callback: OnChangeCallback): EventManager;\n  off(event: Event, callback?: Callback): EventManager;\n  cancelEmit(event: Event): EventManager;\n  emit(\n    event: Event.Show,\n    content: React.ReactNode,\n    options: NotValidatedToastProps\n  ): void;\n  emit(event: Event.Clear, id?: string | number): void;\n  emit(event: Event.ClearWaitingQueue, params: ClearWaitingQueueParams): void;\n  emit(event: Event.DidMount, containerInstance: ContainerInstance): void;\n  emit(event: Event.WillUnmount, containerInstance: ContainerInstance): void;\n  emit(event: Event.Change, toast: number, containerId?: number | string): void;\n}\n\nexport const eventManager: EventManager = {\n  list: new Map(),\n  emitQueue: new Map(),\n\n  on(event: Event, callback: Callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event)!.push(callback);\n    return this;\n  },\n\n  off(event, callback) {\n    if (callback) {\n      const cb = this.list.get(event)!.filter(cb => cb !== callback);\n      this.list.set(event, cb);\n      return this;\n    }\n    this.list.delete(event);\n    return this;\n  },\n\n  cancelEmit(event) {\n    const timers = this.emitQueue.get(event);\n    if (timers) {\n      timers.forEach((timer: TimeoutId) => clearTimeout(timer));\n      this.emitQueue.delete(event);\n    }\n\n    return this;\n  },\n\n  /**\n   * Enqueue the event at the end of the call stack\n   * Doing so let the user call toast as follow:\n   * toast('1')\n   * toast('2')\n   * toast('3')\n   * Without setTimemout the code above will not work\n   */\n  emit(event: Event, ...args: any[]) {\n    this.list.has(event) &&\n      this.list.get(event)!.forEach((callback: Callback) => {\n        const timer = setTimeout(() => {\n          // @ts-ignore\n          callback(...args);\n        }, 0);\n\n        this.emitQueue.has(event) || this.emitQueue.set(event, []);\n        this.emitQueue.get(event)!.push(timer);\n      });\n  }\n};\n","import { isValidElement } from 'react';\n\nimport { Id } from '../types';\n\nexport function isNum(v: any): v is Number {\n  return typeof v === 'number' && !isNaN(v);\n}\n\nexport function isBool(v: any): v is Boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isStr(v: any): v is String {\n  return typeof v === 'string';\n}\n\nexport function isFn(v: any): v is Function {\n  return typeof v === 'function';\n}\n\nexport function parseClassName(v: any) {\n  return typeof v === 'string' ? v : null;\n}\n\nexport function objectValues<T>(obj: Record<string, T>) {\n  return Object.keys(obj).map(key => obj[key]);\n}\n\nexport function hasToastId(toastId?: Id) {\n  return toastId === 0 || toastId;\n}\n\nexport function getAutoCloseDelay(\n  toastAutoClose?: false | number,\n  containerAutoClose?: false | number\n) {\n  return toastAutoClose === false ||\n    (isNum(toastAutoClose) && toastAutoClose > 0)\n    ? toastAutoClose\n    : containerAutoClose;\n}\n\nexport const canUseDom = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport function canBeRendered<T>(content: T): boolean {\n  return (\n    isValidElement(content) || isStr(content) || isFn(content) || isNum(content)\n  );\n}\n","import { ToastPosition, TypeOptions } from '../types';\n\ntype KeyOfPosition =\n  | 'TOP_LEFT'\n  | 'TOP_RIGHT'\n  | 'TOP_CENTER'\n  | 'BOTTOM_LEFT'\n  | 'BOTTOM_RIGHT'\n  | 'BOTTOM_CENTER';\n\ntype KeyOfType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR' | 'DEFAULT' | 'DARK';\n\nexport const POSITION: { [key in KeyOfPosition]: ToastPosition } = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\n\nexport const TYPE: { [key in KeyOfType]: TypeOptions } = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default',\n  DARK: 'dark'\n};\n\nexport const enum DEFAULT {\n  COLLAPSE_DURATION = 300,\n  DEBOUNCE_DURATION = 50,\n  CSS_NAMESPACE = 'Toastify'\n}\n","import * as React from 'react';\nimport { Transition } from 'react-transition-group';\nimport { ToastTransitionProps } from '../types';\n\nimport { collapseToast } from './collapseToast';\nimport { DEFAULT } from './constant';\n\nexport interface CSSTransitionProps {\n  /**\n   * Css class to apply when toast enter\n   */\n  enter: string;\n\n  /**\n   * Css class to apply when toast leave\n   */\n  exit: string;\n\n  /**\n   * Define the duration of the transition in ms\n   * You can also pass an array `[enterDuration, exitDuration]`\n   * `Default: 750`\n   */\n  duration?: number | [number, number];\n\n  /**\n   * Append current toast position to the classname.\n   * For instance `myclass--top-center`...\n   * `Default: false`\n   */\n  appendPosition?: boolean;\n\n  /**\n   * Collapse toast smoothly when animation end\n   * `Default: true`\n   */\n  collapse?: boolean;\n\n  /**\n   * Collapse transition duration\n   * `Default: 300`\n   */\n  collapseDuration?: number;\n}\n\nexport function cssTransition({\n  enter,\n  exit,\n  duration = 750,\n  appendPosition = false,\n  collapse = true,\n  collapseDuration = DEFAULT.COLLAPSE_DURATION\n}: CSSTransitionProps) {\n  let enterDuration: number, exitDuration: number;\n\n  if (Array.isArray(duration) && duration.length === 2) {\n    [enterDuration, exitDuration] = duration;\n  } else {\n    enterDuration = exitDuration = duration as number;\n  }\n\n  return function ToastTransition({\n    children,\n    position,\n    preventExitTransition,\n    done,\n    ...props\n  }: ToastTransitionProps) {\n    const enterClassName = appendPosition ? `${enter}--${position}` : enter;\n    const exitClassName = appendPosition ? `${exit}--${position}` : exit;\n\n    const onEnter = () => {\n      const node = props.nodeRef.current;\n      if (node) {\n        node.classList.add(enterClassName);\n        node.style.animationFillMode = 'forwards';\n        node.style.animationDuration = `${enterDuration}ms`;\n      }\n    };\n\n    const onEntered = () => {\n      const node = props.nodeRef.current;\n      if (node) {\n        node.classList.remove(enterClassName);\n        node.style.cssText = '';\n      }\n    };\n\n    const onExited = () => {\n      const node = props.nodeRef.current;\n\n      if (node) {\n        node.removeEventListener('animationend', onExited);\n        collapse ? collapseToast(node, done, collapseDuration) : done();\n      }\n    };\n\n    const onExit = () => {\n      const node = props.nodeRef.current;\n      if (node) {\n        node.classList.add(exitClassName);\n        node.style.animationFillMode = 'forwards';\n        node.style.animationDuration = `${exitDuration}ms`;\n        node.addEventListener('animationend', onExited);\n      }\n    };\n\n    return (\n      <Transition\n        {...props}\n        timeout={\n          preventExitTransition\n            ? collapse\n              ? collapseDuration\n              : DEFAULT.DEBOUNCE_DURATION\n            : {\n                enter: enterDuration,\n                exit: collapse\n                  ? exitDuration + collapseDuration\n                  : exitDuration + DEFAULT.DEBOUNCE_DURATION\n              }\n        }\n        onEnter={onEnter}\n        onEntered={onEntered}\n        onExit={preventExitTransition ? onExited : onExit}\n        unmountOnExit\n      >\n        {children}\n      </Transition>\n    );\n  };\n}\n","import { DEFAULT } from './constant';\n\n/**\n * Used to collapse toast after exit animation\n */\nexport function collapseToast(\n  node: HTMLElement,\n  done: () => void,\n  duration = DEFAULT.COLLAPSE_DURATION\n) {\n  const height = node.scrollHeight;\n  const style = node.style;\n\n  requestAnimationFrame(() => {\n    style.minHeight = 'initial';\n    style.height = height + 'px';\n    style.transition = `all ${duration}ms`;\n\n    requestAnimationFrame(() => {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(() => done(), duration as number);\n    });\n  });\n}\n","import * as React from 'react';\nimport { DEFAULT } from '../utils';\nimport { TypeOptions } from '../types';\n\nexport interface CloseButtonProps {\n  closeToast: (e: React.MouseEvent<HTMLElement>) => void;\n  type: TypeOptions;\n  ariaLabel?: string;\n}\n\nexport function CloseButton({\n  closeToast,\n  type,\n  ariaLabel = 'close'\n}: CloseButtonProps) {\n  return (\n    <button\n      className={`${DEFAULT.CSS_NAMESPACE}__close-button ${DEFAULT.CSS_NAMESPACE}__close-button--${type}`}\n      type=\"button\"\n      onClick={e => {\n        e.stopPropagation();\n        closeToast(e);\n      }}\n      aria-label={ariaLabel}\n    >\n      <svg aria-hidden=\"true\" viewBox=\"0 0 14 16\">\n        <path\n          fillRule=\"evenodd\"\n          d=\"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n        />\n      </svg>\n    </button>\n  );\n}\n","import * as React from 'react';\nimport cx from 'classnames';\n\nimport { TYPE, DEFAULT } from './../utils';\nimport { TypeOptions } from '../types';\n\nexport interface ProgressBarProps {\n  /**\n   * The animation delay which determine when to close the toast\n   */\n  delay: number;\n\n  /**\n   * Whether or not the animation is running or paused\n   */\n  isRunning: boolean;\n\n  /**\n   * Func to close the current toast\n   */\n  closeToast: () => void;\n\n  /**\n   * Optional type : info, success ...\n   */\n  type: TypeOptions;\n\n  /**\n   * Hide or not the progress bar\n   */\n  hide?: boolean;\n\n  /**\n   * Optionnal className\n   */\n  className?: string | null;\n\n  /**\n   * Optionnal inline style\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Tell wether or not controlled progress bar is used\n   */\n  controlledProgress?: boolean;\n\n  /**\n   * Controlled progress value\n   */\n  progress?: number | string;\n\n  /**\n   * Support rtl content\n   */\n  rtl?: boolean;\n\n  /**\n   * Tell if the component is visible on screen or not\n   */\n  isIn?: boolean;\n}\n\nexport function ProgressBar({\n  delay,\n  isRunning,\n  closeToast,\n  type,\n  hide,\n  className,\n  style: userStyle,\n  controlledProgress,\n  progress,\n  rtl,\n  isIn\n}: ProgressBarProps) {\n  const style: React.CSSProperties = {\n    ...userStyle,\n    animationDuration: `${delay}ms`,\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: hide ? 0 : 1\n  };\n\n  if (controlledProgress) style.transform = `scaleX(${progress})`;\n\n  const classNames = cx(\n    `${DEFAULT.CSS_NAMESPACE}__progress-bar`,\n    controlledProgress\n      ? `${DEFAULT.CSS_NAMESPACE}__progress-bar--controlled`\n      : `${DEFAULT.CSS_NAMESPACE}__progress-bar--animated`,\n    `${DEFAULT.CSS_NAMESPACE}__progress-bar--${type}`,\n    {\n      [`${DEFAULT.CSS_NAMESPACE}__progress-bar--rtl`]: rtl\n    },\n    className\n  );\n\n  // 🧐 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n  const animationEvent = {\n    [controlledProgress && progress! >= 1\n      ? 'onTransitionEnd'\n      : 'onAnimationEnd']:\n      controlledProgress && progress! < 1\n        ? null\n        : () => {\n            isIn && closeToast();\n          }\n  };\n\n  return <div className={classNames} style={style} {...animationEvent} />;\n}\n\nProgressBar.defaultProps = {\n  type: TYPE.DEFAULT,\n  hide: false\n};\n","import * as React from 'react';\nimport cx from 'classnames';\n\nimport { ProgressBar } from './ProgressBar';\nimport { ToastProps } from '../types';\nimport { DEFAULT, isFn } from '../utils';\nimport { useToast } from '../hooks';\n\nexport const Toast: React.FC<ToastProps> = props => {\n  const {\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  } = useToast(props);\n  const {\n    closeButton,\n    children,\n    autoClose,\n    onClick,\n    type,\n    hideProgressBar,\n    closeToast,\n    transition: Transition,\n    position,\n    className,\n    style,\n    bodyClassName,\n    bodyStyle,\n    progressClassName,\n    progressStyle,\n    updateId,\n    role,\n    progress,\n    rtl,\n    toastId,\n    deleteToast\n  } = props;\n  const cssClasses = cx(\n    `${DEFAULT.CSS_NAMESPACE}__toast`,\n    `${DEFAULT.CSS_NAMESPACE}__toast--${type}`,\n    {\n      [`${DEFAULT.CSS_NAMESPACE}__toast--rtl`]: rtl\n    },\n    className\n  );\n  const controlledProgress = !!progress;\n\n  function renderCloseButton(closeButton: any) {\n    if (!closeButton) return null;\n\n    const props = { closeToast, type };\n    if (isFn(closeButton)) return closeButton(props);\n    if (React.isValidElement(closeButton))\n      return React.cloneElement(closeButton, props);\n  }\n\n  return (\n    <Transition\n      in={props.in!}\n      appear\n      done={deleteToast}\n      position={position}\n      preventExitTransition={preventExitTransition}\n      nodeRef={toastRef}\n    >\n      <div\n        id={toastId as string}\n        onClick={onClick}\n        className={cssClasses}\n        {...eventHandlers}\n        style={style}\n        ref={toastRef}\n      >\n        <div\n          {...(props.in && { role: role })}\n          className={cx(`${DEFAULT.CSS_NAMESPACE}__toast-body`, bodyClassName)}\n          style={bodyStyle}\n        >\n          {children}\n        </div>\n        {renderCloseButton(closeButton)}\n        {(autoClose || controlledProgress) && (\n          <ProgressBar\n            {...(updateId && !controlledProgress\n              ? { key: `pb-${updateId}` }\n              : {})}\n            rtl={rtl}\n            delay={autoClose as number}\n            isRunning={isRunning}\n            isIn={props.in}\n            closeToast={closeToast}\n            hide={hideProgressBar}\n            type={type}\n            style={progressStyle}\n            className={progressClassName}\n            controlledProgress={controlledProgress}\n            progress={progress}\n          />\n        )}\n      </div>\n    </Transition>\n  );\n};\n","import {\n  useState,\n  useRef,\n  useEffect,\n  isValidElement,\n  DOMAttributes\n} from 'react';\n\nimport { isFn } from '../utils';\nimport { ToastProps } from '../types';\nimport { useKeeper } from './useKeeper';\n\ninterface Draggable {\n  start: number;\n  x: number;\n  y: number;\n  deltaX: number;\n  removalDistance: number;\n  canCloseOnClick: boolean;\n  canDrag: boolean;\n  boundingRect: DOMRect | null;\n}\n\ntype DragEvent = MouseEvent & TouchEvent;\n\nfunction getX(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientX\n    : e.clientX;\n}\n\nfunction getY(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientY\n    : e.clientY;\n}\n\nexport function useToast(props: ToastProps) {\n  const [isRunning, setIsRunning] = useState(true);\n  const [preventExitTransition, setPreventExitTransition] = useState(false);\n  const toastRef = useRef<HTMLDivElement>(null);\n  const drag = useKeeper<Draggable>({\n    start: 0,\n    x: 0,\n    y: 0,\n    deltaX: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null\n  });\n  const syncProps = useKeeper(props, true);\n  const { autoClose, pauseOnHover, closeToast, onClick, closeOnClick } = props;\n\n  useEffect(() => {\n    if (isFn(props.onOpen))\n      props.onOpen(isValidElement(props.children) && props.children.props);\n\n    return () => {\n      if (isFn(syncProps.onClose))\n        syncProps.onClose(\n          isValidElement(syncProps.children) && syncProps.children.props\n        );\n    };\n  }, []);\n\n  useEffect(() => {\n    props.draggable && bindDragEvents();\n    return () => {\n      props.draggable && unbindDragEvents();\n    };\n  }, [props.draggable]);\n\n  useEffect(() => {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return () => {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n\n  function onDragStart(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    const toast = toastRef.current!;\n    drag.canCloseOnClick = true;\n    drag.canDrag = true;\n    drag.boundingRect = toast.getBoundingClientRect();\n    toast.style.transition = '';\n    drag.start = drag.x = getX(e.nativeEvent as DragEvent);\n    drag.removalDistance = toast.offsetWidth * (props.draggablePercent / 100);\n  }\n\n  function onDragTransitionEnd() {\n    if (drag.boundingRect) {\n      const { top, bottom, left, right } = drag.boundingRect;\n\n      if (\n        props.pauseOnHover &&\n        drag.x >= left &&\n        drag.x <= right &&\n        drag.y >= top &&\n        drag.y <= bottom\n      ) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n\n  function playToast() {\n    setIsRunning(true);\n  }\n\n  function pauseToast() {\n    setIsRunning(false);\n  }\n\n  function bindFocusEvents() {\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n\n  function bindDragEvents() {\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n\n  function onDragMove(e: MouseEvent | TouchEvent) {\n    const toast = toastRef.current!;\n\n    if (drag.canDrag) {\n      if (isRunning) pauseToast();\n\n      drag.x = getX(e as DragEvent);\n      drag.deltaX = drag.x - drag.start;\n      drag.y = getY(e as DragEvent);\n\n      // prevent false positif during a toast click\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n\n      toast.style.transform = `translateX(${drag.deltaX}px)`;\n      toast.style.opacity = `${1 -\n        Math.abs(drag.deltaX / drag.removalDistance)}`;\n    }\n  }\n\n  function onDragEnd() {\n    const toast = toastRef.current!;\n    if (drag.canDrag) {\n      drag.canDrag = false;\n\n      if (Math.abs(drag.deltaX) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = 'translateX(0)';\n      toast.style.opacity = '1';\n    }\n  }\n\n  const eventHandlers: DOMAttributes<HTMLElement> = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  }\n\n  // prevent toast from closing when user drags the toast\n  if (closeOnClick) {\n    eventHandlers.onClick = (e: React.MouseEvent) => {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n\n  return {\n    playToast,\n    pauseToast,\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  };\n}\n","import { DEFAULT, cssTransition } from '../utils';\n\nconst Bounce = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__bounce-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__bounce-exit`,\n  appendPosition: true\n});\n\nconst Slide = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__slide-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__slide-exit`,\n  duration: [450, 750],\n  appendPosition: true\n});\n\nconst Zoom = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__zoom-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__zoom-exit`\n});\n\nconst Flip = cssTransition({\n  enter: `${DEFAULT.CSS_NAMESPACE}__flip-enter`,\n  exit: `${DEFAULT.CSS_NAMESPACE}__flip-exit`\n});\n\nexport { Bounce, Slide, Zoom, Flip };\n","import * as React from 'react';\nimport { ToastProps } from '../types';\n\ntype ToastPositionerProps = Pick<ToastProps, 'className' | 'style' | 'in'>;\n\nexport const ToastPositioner: React.FC<ToastPositionerProps> = ({\n  children,\n  className,\n  style,\n  ...rest\n}) => {\n  // Monkey patch react-transition-group\n  // As exit transition is broken with strict mode\n  delete rest.in;\n\n  return (\n    <div className={className!} style={style}>\n      {React.Children.map(children, child =>\n        React.cloneElement(child as React.ReactElement<any>, rest)\n      )}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { Toast } from './Toast';\nimport { CloseButton } from './CloseButton';\nimport { Bounce } from './Transitions';\nimport { POSITION, DEFAULT, parseClassName, objectValues } from '../utils';\nimport { useToastContainer } from '../hooks';\nimport { ToastContainerProps, ToastPosition } from '../types';\nimport { ToastPositioner } from './ToastPositioner';\n\nexport const ToastContainer: React.FC<ToastContainerProps> = props => {\n  const { getToastToRender, containerRef, isToastActive } = useToastContainer(\n    props\n  );\n  const { className, style, rtl, containerId } = props;\n\n  return (\n    <div\n      ref={containerRef}\n      className={DEFAULT.CSS_NAMESPACE as string}\n      id={containerId as string}\n    >\n      {getToastToRender((position, toastList) => {\n        const swag = {\n          className: cx(\n            `${DEFAULT.CSS_NAMESPACE}__toast-container`,\n            `${DEFAULT.CSS_NAMESPACE}__toast-container--${position}`,\n            { [`${DEFAULT.CSS_NAMESPACE}__toast-container--rtl`]: rtl },\n            parseClassName(className)\n          ),\n          style:\n            toastList.length === 0\n              ? { ...style, pointerEvents: 'none' }\n              : { ...style }\n        } as any;\n\n        return (\n          <ToastPositioner {...swag} key={`container-${position}`}>\n            {toastList.map(({ content, props: toastProps }) => {\n              return (\n                <Toast\n                  {...toastProps}\n                  in={isToastActive(toastProps.toastId)}\n                  key={`toast-${toastProps.key}`}\n                  closeButton={\n                    toastProps.closeButton === true\n                      ? CloseButton\n                      : toastProps.closeButton\n                  }\n                >\n                  {content}\n                </Toast>\n              );\n            })}\n          </ToastPositioner>\n        );\n      })}\n    </div>\n  );\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  ToastContainer.propTypes = {\n    // @ts-ignore\n    position: PropTypes.oneOf(objectValues(POSITION)),\n\n    // @ts-ignore\n    autoClose: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n\n    // @ts-ignore\n    closeButton: PropTypes.oneOfType([\n      PropTypes.node,\n      PropTypes.bool,\n      PropTypes.func\n    ]),\n    hideProgressBar: PropTypes.bool,\n    pauseOnHover: PropTypes.bool,\n    closeOnClick: PropTypes.bool,\n    newestOnTop: PropTypes.bool,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    toastClassName: PropTypes.string,\n    bodyClassName: PropTypes.string,\n    progressClassName: PropTypes.string,\n    progressStyle: PropTypes.object,\n    transition: PropTypes.func,\n    rtl: PropTypes.bool,\n    draggable: PropTypes.bool,\n    draggablePercent: PropTypes.number,\n    pauseOnFocusLoss: PropTypes.bool,\n    enableMultiContainer: PropTypes.bool,\n    containerId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    role: PropTypes.string,\n    onClick: PropTypes.func\n  };\n}\n\nToastContainer.defaultProps = {\n  position: POSITION.TOP_RIGHT as ToastPosition,\n  transition: Bounce,\n  rtl: false,\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  newestOnTop: false,\n  draggable: true,\n  draggablePercent: 80,\n  role: 'alert'\n};\n","import {\n  useEffect,\n  useRef,\n  useReducer,\n  cloneElement,\n  isValidElement\n} from 'react';\nimport { eventManager, Event } from '../core';\nimport {\n  parseClassName,\n  canBeRendered,\n  isBool,\n  isFn,\n  isNum,\n  isStr,\n  hasToastId,\n  getAutoCloseDelay\n} from '../utils';\n\nimport {\n  Id,\n  ToastContainerProps,\n  ToastProps,\n  ToastContent,\n  Toast,\n  ToastPosition,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastTransition\n} from '../types';\nimport { useKeeper } from './useKeeper';\nimport { reducer } from './toastContainerReducer';\n\ntype CollectionItem = Record<Id, Toast>;\ntype ToastToRender = Partial<Record<ToastPosition, Toast[]>>;\n\ninterface QueuedToast {\n  toastContent: ToastContent;\n  toastProps: ToastProps;\n  staleId?: Id;\n}\n\nexport interface ContainerInstance {\n  toastKey: number;\n  displayedToast: number;\n  props: ToastContainerProps;\n  containerId?: Id | null;\n  isToastActive: (toastId: Id) => boolean;\n  getToast: (id: Id) => Toast | null;\n}\n\nexport function useToastContainer(props: ToastContainerProps) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const [toast, dispatch] = useReducer(reducer, []);\n  const containerRef = useRef(null);\n  let toastCount = useKeeper(0);\n  let queue = useKeeper<QueuedToast[]>([]);\n  const collection = useKeeper<CollectionItem>({});\n  const instance = useKeeper<ContainerInstance>({\n    toastKey: 1,\n    displayedToast: 0,\n    props,\n    containerId: null,\n    isToastActive: isToastActive,\n    getToast: id => collection[id] || null\n  });\n\n  useEffect(() => {\n    instance.containerId = props.containerId;\n    eventManager\n      .cancelEmit(Event.WillUnmount)\n      .on(Event.Show, buildToast)\n      .on(Event.Clear, toastId => containerRef.current && removeToast(toastId))\n      .on(Event.ClearWaitingQueue, clearWaitingQueue)\n      .emit(Event.DidMount, instance);\n\n    return () => eventManager.emit(Event.WillUnmount, instance);\n  }, []);\n\n  useEffect(() => {\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toast.length;\n    eventManager.emit(Event.Change, toast.length, props.containerId);\n  }, [toast]);\n\n  useEffect(() => {\n    instance.props = props;\n  });\n\n  function isToastActive(id: Id) {\n    return toast.indexOf(id) !== -1;\n  }\n\n  function clearWaitingQueue({ containerId }: ClearWaitingQueueParams) {\n    const { limit, enableMultiContainer } = instance.props;\n    if (\n      limit &&\n      (!containerId ||\n        (instance.containerId === containerId && enableMultiContainer))\n    ) {\n      toastCount -= queue.length;\n      queue = [];\n    }\n  }\n\n  function removeToast(toastId?: Id) {\n    const queueLen = queue.length;\n    toastCount = hasToastId(toastId)\n      ? toastCount - 1\n      : toastCount - instance.displayedToast;\n\n    if (toastCount < 0) toastCount = 0;\n\n    if (queueLen > 0) {\n      const freeSlot = hasToastId(toastId) ? 1 : instance.props.limit!;\n\n      if (queueLen === 1 || freeSlot === 1) {\n        instance.displayedToast++;\n        dequeueToast();\n      } else {\n        const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n        instance.displayedToast = toDequeue;\n\n        for (let i = 0; i < toDequeue; i++) dequeueToast();\n      }\n    }\n    dispatch({ type: 'REMOVE', toastId });\n  }\n\n  function dequeueToast() {\n    const { toastContent, toastProps, staleId } = queue.shift() as QueuedToast;\n\n    // ensure that exit transition has been completed, hence the timeout\n    setTimeout(() => {\n      appendToast(toastContent, toastProps, staleId);\n    }, 500);\n  }\n\n  /**\n   * check if a container is attached to the dom\n   * check for multi-container, build only if associated\n   * check for duplicate toastId if no update\n   */\n  function isNotValid({\n    containerId,\n    toastId,\n    updateId\n  }: NotValidatedToastProps) {\n    return !containerRef.current ||\n      (instance.props.enableMultiContainer &&\n        containerId !== instance.props.containerId) ||\n      (instance.isToastActive(toastId) && updateId == null)\n      ? true\n      : false;\n  }\n\n  // this function and all the function called inside needs to rely on ref(`useKeeper`)\n  function buildToast(\n    content: ToastContent,\n    { delay, staleId, ...options }: NotValidatedToastProps\n  ) {\n    if (!canBeRendered(content) || isNotValid(options)) return;\n\n    const { toastId, updateId } = options;\n    const { props, isToastActive } = instance;\n    const closeToast = () => removeToast(toastId);\n    const isNotAnUpdate = !isToastActive(toastId);\n\n    if (isNotAnUpdate) toastCount++;\n\n    const toastProps: ToastProps = {\n      toastId,\n      updateId,\n      key: options.key || instance.toastKey++,\n      type: options.type,\n      closeToast: closeToast,\n      closeButton: options.closeButton,\n      rtl: props.rtl,\n      position: options.position || (props.position as ToastPosition),\n      transition: options.transition || (props.transition as ToastTransition),\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(\n        options.bodyClassName || props.bodyClassName\n      ),\n      style: options.style || props.toastStyle,\n      bodyStyle: options.bodyStyle || props.bodyStyle,\n      onClick: options.onClick || props.onClick,\n      pauseOnHover: isBool(options.pauseOnHover)\n        ? options.pauseOnHover\n        : props.pauseOnHover,\n      pauseOnFocusLoss: isBool(options.pauseOnFocusLoss)\n        ? options.pauseOnFocusLoss\n        : props.pauseOnFocusLoss,\n      draggable: isBool(options.draggable)\n        ? options.draggable\n        : props.draggable,\n      draggablePercent: isNum(options.draggablePercent)\n        ? options.draggablePercent\n        : (props.draggablePercent as number),\n      closeOnClick: isBool(options.closeOnClick)\n        ? options.closeOnClick\n        : props.closeOnClick,\n      progressClassName: parseClassName(\n        options.progressClassName || props.progressClassName\n      ),\n      progressStyle: options.progressStyle || props.progressStyle,\n      autoClose: getAutoCloseDelay(options.autoClose, props.autoClose),\n      hideProgressBar: isBool(options.hideProgressBar)\n        ? options.hideProgressBar\n        : props.hideProgressBar,\n      progress: options.progress,\n      role: isStr(options.role) ? options.role : props.role,\n      deleteToast() {\n        removeFromCollection(toastId);\n      }\n    };\n\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n\n    let closeButton = props.closeButton;\n\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      closeButton = canBeRendered(props.closeButton) ? props.closeButton : true;\n    }\n\n    toastProps.closeButton = closeButton;\n\n    let toastContent = content;\n\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content, {\n        closeToast\n      });\n    } else if (isFn(content)) {\n      toastContent = content({ closeToast });\n    }\n\n    // not handling limit + delay by design. Waiting for user feedback first\n    if (\n      props.limit &&\n      props.limit > 0 &&\n      toastCount > props.limit &&\n      isNotAnUpdate\n    ) {\n      queue.push({ toastContent, toastProps, staleId });\n    } else if (isNum(delay) && (delay as number) > 0) {\n      setTimeout(() => {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n\n  function appendToast(\n    content: ToastContent,\n    toastProps: ToastProps,\n    staleId?: Id\n  ) {\n    const { toastId } = toastProps;\n\n    collection[toastId] = {\n      content,\n      props: toastProps\n    };\n    dispatch({\n      type: 'ADD',\n      toastId,\n      staleId\n    });\n  }\n\n  function removeFromCollection(toastId: Id) {\n    delete collection[toastId];\n    forceUpdate();\n  }\n\n  function getToastToRender<T>(\n    cb: (position: ToastPosition, toastList: Toast[]) => T\n  ) {\n    const toastToRender: ToastToRender = {};\n    const toastList = props.newestOnTop\n      ? Object.keys(collection).reverse()\n      : Object.keys(collection);\n\n    for (let i = 0; i < toastList.length; i++) {\n      const toast = collection[toastList[i]];\n      const { position } = toast.props;\n      toastToRender[position] || (toastToRender[position] = []);\n\n      toastToRender[position]!.push(toast);\n    }\n\n    return (Object.keys(toastToRender) as Array<ToastPosition>).map(p =>\n      cb(p, toastToRender[p]!)\n    );\n  }\n\n  return {\n    getToastToRender,\n    collection,\n    containerRef,\n    isToastActive\n  };\n}\n","import * as React from 'react';\nimport { render } from 'react-dom';\n\nimport { POSITION, TYPE, canUseDom, isStr, isNum, isFn } from '../utils';\nimport { eventManager, OnChangeCallback, Event } from './eventManager';\nimport {\n  ToastContent,\n  ToastOptions,\n  ToastProps,\n  Id,\n  ToastContainerProps,\n  UpdateOptions,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps\n} from '../types';\nimport { ContainerInstance } from 'hooks';\nimport { ToastContainer } from '../components';\n\ninterface EnqueuedToast {\n  content: ToastContent;\n  options: NotValidatedToastProps;\n}\n\nlet containers = new Map<ContainerInstance | Id, ContainerInstance>();\nlet latestInstance: ContainerInstance | Id;\nlet containerDomNode: HTMLElement;\nlet containerConfig: ToastContainerProps;\nlet queue: EnqueuedToast[] = [];\nlet lazy = false;\n\n/**\n * Check whether any container is currently mounted in the DOM\n */\nfunction isAnyContainerMounted() {\n  return containers.size > 0;\n}\n\n/**\n * Get the container by id. Returns the last container declared when no id is given.\n */\nfunction getContainer(containerId?: Id) {\n  if (!isAnyContainerMounted()) return null;\n  return containers.get(!containerId ? latestInstance : containerId);\n}\n\n/**\n * Get the toast by id, given it's in the DOM, otherwise returns null\n */\nfunction getToast(toastId: Id, { containerId }: ToastOptions) {\n  const container = getContainer(containerId);\n  if (!container) return null;\n\n  return container.getToast(toastId);\n}\n\n/**\n * Generate a random toastId\n */\nfunction generateToastId() {\n  return (Math.random().toString(36) + Date.now().toString(36)).substr(2, 10);\n}\n\n/**\n * Generate a toastId or use the one provided\n */\nfunction getToastId(options?: ToastOptions) {\n  if (options && (isStr(options.toastId) || isNum(options.toastId))) {\n    return options.toastId;\n  }\n\n  return generateToastId();\n}\n\n/**\n * If the container is not mounted, the toast is enqueued and\n * the container lazy mounted\n */\nfunction dispatchToast(\n  content: ToastContent,\n  options: NotValidatedToastProps\n): Id {\n  if (isAnyContainerMounted()) {\n    eventManager.emit(Event.Show, content, options);\n  } else {\n    queue.push({ content, options });\n    if (lazy && canUseDom) {\n      lazy = false;\n      containerDomNode = document.createElement('div');\n      document.body.appendChild(containerDomNode);\n      render(<ToastContainer {...containerConfig} />, containerDomNode);\n    }\n  }\n\n  return options.toastId;\n}\n\n/**\n * Merge provided options with the defaults settings and generate the toastId\n */\nfunction mergeOptions(type: string, options?: ToastOptions) {\n  return {\n    ...options,\n    type: (options && options.type) || type,\n    toastId: getToastId(options)\n  } as NotValidatedToastProps;\n}\n\nconst toast = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));\n\ntoast.success = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.SUCCESS, options));\n\ntoast.info = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.INFO, options));\n\ntoast.error = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.ERROR, options));\n\ntoast.warning = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.WARNING, options));\n\ntoast.dark = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(content, mergeOptions(TYPE.DARK, options));\n\n/**\n * Maybe I should remove warning in favor of warn, I don't know\n */\ntoast.warn = toast.warning;\n\n/**\n * Remove toast programmaticaly\n */\ntoast.dismiss = (id?: Id) =>\n  isAnyContainerMounted() && eventManager.emit(Event.Clear, id);\n\n/**\n * Clear waiting queue when limit is used\n */\ntoast.clearWaitingQueue = (params: ClearWaitingQueueParams = {}) =>\n  isAnyContainerMounted() && eventManager.emit(Event.ClearWaitingQueue, params);\n\n/**\n * return true if one container is displaying the toast\n */\ntoast.isActive = (id: Id) => {\n  let isToastActive = false;\n\n  containers.forEach(container => {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n\n  return isToastActive;\n};\n\ntoast.update = (toastId: Id, options: UpdateOptions = {}) => {\n  // if you call toast and toast.update directly nothing will be displayed\n  // this is why I defered the update\n  setTimeout(() => {\n    const toast = getToast(toastId, options as ToastOptions);\n    if (toast) {\n      const { props: oldOptions, content: oldContent } = toast;\n\n      const nextOptions = {\n        ...oldOptions,\n        ...options,\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      } as ToastProps & UpdateOptions;\n\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n\n      const content =\n        typeof nextOptions.render !== 'undefined'\n          ? nextOptions.render\n          : oldContent;\n      delete nextOptions.render;\n\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n\n/**\n * Used for controlled progress bar.\n */\ntoast.done = (id: Id) => {\n  toast.update(id, {\n    progress: 1\n  });\n};\n\n/**\n * Track changes. The callback get the number of toast displayed\n *\n */\ntoast.onChange = (callback: OnChangeCallback) => {\n  if (isFn(callback)) {\n    eventManager.on(Event.Change, callback);\n  }\n  return () => {\n    isFn(callback) && eventManager.off(Event.Change, callback);\n  };\n};\n\n/**\n * Configure the ToastContainer when lazy mounted\n */\ntoast.configure = (config: ToastContainerProps = {}) => {\n  lazy = true;\n  containerConfig = config;\n};\n\ntoast.POSITION = POSITION;\ntoast.TYPE = TYPE;\n\n/**\n * Wait until the ToastContainer is mounted to dispatch the toast\n * and attach isActive method\n */\neventManager\n  .on(Event.DidMount, (containerInstance: ContainerInstance) => {\n    latestInstance = containerInstance.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n\n    queue.forEach(item => {\n      eventManager.emit(Event.Show, item.content, item.options);\n    });\n\n    queue = [];\n  })\n  .on(Event.WillUnmount, (containerInstance: ContainerInstance) => {\n    containers.delete(containerInstance.containerId || containerInstance);\n\n    if (containers.size === 0) {\n      eventManager\n        .off(Event.Show)\n        .off(Event.Clear)\n        .off(Event.ClearWaitingQueue);\n    }\n\n    if (canUseDom && containerDomNode) {\n      document.body.removeChild(containerDomNode);\n    }\n  });\n\nexport { toast };\n","import { useRef, useEffect } from 'react';\n\n/**\n * `useKeeper` is a helper around `useRef`.\n *\n * You don't need to access the `.current`property to get the value\n * If refresh is set to true. The ref will be updated every render\n */\nexport function useKeeper<T>(arg: T, refresh = false) {\n  const ref = useRef<T>(arg);\n\n  useEffect(() => {\n    if (refresh) ref.current = arg;\n  });\n\n  return ref.current;\n}\n","import { Id } from '../types';\n\nimport { hasToastId } from '../utils';\n\nexport type State = Array<Id>;\nexport type Action =\n  | { type: 'ADD'; toastId: Id; staleId?: Id }\n  | { type: 'REMOVE'; toastId?: Id };\n\nexport function reducer(state: State, action: Action) {\n  switch (action.type) {\n    case 'ADD':\n      return [...state, action.toastId].filter(id => id !== action.staleId);\n    case 'REMOVE':\n      return hasToastId(action.toastId)\n        ? state.filter(id => id !== action.toastId)\n        : [];\n  }\n}\n","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}"],"sourceRoot":""}